
@page "/products"
@inject IJSRuntime JSRuntime

<script>
    // wwwroot/js/site.js

    function showModal(modalId) {
        const modal = document.getElementById(modalId);
        if (modal) {
            modal.style.display = "block";
        }
    }

    function hideModal(modalId) {
        const modal = document.getElementById(modalId);
        if (modal) {
            modal.style.display = "none";
        }
    }


</script>



<h3>Products</h3>


<div class="row">
    @foreach (var product in products)
    {
        <div class="col-sm-6 col-md-3 mb-4">
            <div class="card" style="width: 16rem; padding: 0.5rem;">
                <img src="@product.ImageUrl" class="card-img-top" alt="@product.Name" style="height: 8rem; object-fit: cover;">
                <div class="card-body" style="padding: 0.5rem;">
                    <h6 class="card-title" style="font-size: 1rem;">@product.Name</h6>
                    <p class="card-text" style="font-size: 0.9rem; color: #555;">@product.Description</p>
                    <p class="card-text"><strong>Price:</strong> $@product.Price</p>
                    <button class="btn btn-sm btn-primary" @onclick="() => ShowProductModal(product)">Buy Now</button>
                </div>
            </div>
        </div>
    }
</div>

<!-- Modal -->
<div id="productModal" class="modal" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0, 0, 0, 0.5); z-index: 1050;">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Product Details</h5>
                <button type="button" class="btn-close" aria-label="Close" @onclick="CloseProductModal"></button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-md-6">
                        <img src="@selectedProduct?.ImageUrl" alt="@selectedProduct?.Name" style="width: 100%; height: auto;">
                        <p class="mt-2"><strong>@selectedProduct?.Name</strong></p>
                        <p><strong>Price:</strong> $@selectedProduct?.Price</p>
                    </div>
                    <div class="col-md-6">
                        <p>@selectedProduct?.Description</p>
                        <div class="d-flex align-items-center mb-3">
                            <button class="btn btn-sm btn-outline-secondary" @onclick="DecrementQuantity">-</button>
                            <span class="mx-3">@quantity</span>
                            <button class="btn btn-sm btn-outline-secondary" @onclick="IncrementQuantity">+</button>
                        </div>
                        <div>
                            <button class="btn btn-success me-2">Buy</button>
                            <button class="btn btn-warning">Add to Cart</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>




@code {
    private List<Product> products = new List<Product>
    {
        new Product { Name = "Product 1", Description = "This is a great product.", Price = 19.99, ImageUrl = "https://via.placeholder.com/150" },
        new Product { Name = "Product 2", Description = "You will love this product.", Price = 29.99, ImageUrl = "https://via.placeholder.com/150" },
        new Product { Name = "Product 3", Description = "An amazing product for everyone.", Price = 39.99, ImageUrl = "https://via.placeholder.com/150" },
        new Product { Name = "Product 4", Description = "A must-have item.", Price = 49.99, ImageUrl = "https://via.placeholder.com/150" },
        new Product { Name = "Product 5", Description = "Highly recommended product.", Price = 59.99, ImageUrl = "https://via.placeholder.com/150" },
    };

    private Product? selectedProduct;
    private int quantity = 1;

    private async Task ShowProductModal(Product product)
    {
        selectedProduct = product;
        quantity = 1; // Reset quantity to 1 for new selections
        await JSRuntime.InvokeVoidAsync("showModal", "productModal");
    }

    private async Task CloseProductModal()
    {
        selectedProduct = null;
        await JSRuntime.InvokeVoidAsync("hideModal", "productModal");
    }

    private void IncrementQuantity()
    {
        quantity++;
    }

    private void DecrementQuantity()
    {
        if (quantity > 1) quantity--;
    }

    private class Product
    {
        public string Name { get; set; }
        public string Description { get; set; }
        public double Price { get; set; }
        public string ImageUrl { get; set; }
    }
}

